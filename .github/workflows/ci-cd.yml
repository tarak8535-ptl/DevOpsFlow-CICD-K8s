name: CloudTarkk InfraGen CI/CD

on:
  push:
    branches: [ main, staging ]
  pull_request:
    branches: [ main, staging ]

env:
  AWS_REGION: us-east-1
  PROJECT_NAME: cloudtarkk-infragen
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com
  BACKEND_IMAGE: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/cloudtarkk-infragen/backend:${{ github.sha }}
  FRONTEND_IMAGE: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/cloudtarkk-infragen/frontend:${{ github.sha }}

jobs:
  # Backend Jobs
  backend-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json
      - name: Install dependencies
        run: |
          cd backend
          npm ci
      - name: Run linting and tests
        run: |
          cd backend
          npm run lint
          npm test
      - name: Upload test coverage
        uses: actions/upload-artifact@v3
        with:
          name: backend-coverage
          path: backend/coverage/
          retention-days: 7

  backend-security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: './backend'
          exit-code: '1'
          severity: 'HIGH,CRITICAL'
          format: 'table'
        continue-on-error: true

  # Frontend Jobs
  frontend-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      - name: Install dependencies
        run: |
          cd frontend
          npm ci
      - name: Run linting and tests
        run: |
          cd frontend
          npm run lint
          npm test
      - name: Upload test coverage
        uses: actions/upload-artifact@v3
        with:
          name: frontend-coverage
          path: frontend/coverage/
          retention-days: 7

  frontend-security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: './frontend'
          exit-code: '1'
          severity: 'HIGH,CRITICAL'
          format: 'table'
        continue-on-error: true

  # Infrastructure Jobs
  infrastructure:
    runs-on: ubuntu-latest
    needs: [backend-test, backend-security, frontend-test, frontend-security]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging'
    steps:
      - uses: actions/checkout@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0
      - name: Terraform Init
        run: |
          cd terraform
          terraform init
      - name: Terraform Plan
        run: |
          cd terraform
          terraform plan -out=tfplan
      - name: Terraform Apply
        run: |
          cd terraform
          terraform apply -auto-approve tfplan

  # Build Jobs
  build:
    runs-on: ubuntu-latest
    needs: [infrastructure]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging'
    steps:
      - uses: actions/checkout@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Build and push backend image
        run: |
          docker build -t ${{ env.BACKEND_IMAGE }} ./backend
          docker push ${{ env.BACKEND_IMAGE }}
      
      - name: Build and push frontend image
        run: |
          docker build -t ${{ env.FRONTEND_IMAGE }} ./frontend
          docker push ${{ env.FRONTEND_IMAGE }}

  # Deployment Jobs
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/staging'
    environment: staging
    steps:
      - uses: actions/checkout@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.PROJECT_NAME }}-cluster
      - name: Deploy to EKS
        run: |
          kubectl apply -f k8s/namespace.yml
          sed -i "s|image:.*backend.*|image: ${{ env.BACKEND_IMAGE }}|g" k8s/backend-deployment.yml
          sed -i "s|image:.*frontend.*|image: ${{ env.FRONTEND_IMAGE }}|g" k8s/deployment.yml
          kubectl apply -f k8s/
          kubectl rollout status deployment/backend-deployment -n devops

  deploy-production:
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - uses: actions/checkout@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.PROJECT_NAME }}-cluster
      - name: Deploy to EKS
        run: |
          kubectl apply -f k8s/namespace.yml
          sed -i "s|image:.*backend.*|image: ${{ env.BACKEND_IMAGE }}|g" k8s/backend-deployment.yml
          sed -i "s|image:.*frontend.*|image: ${{ env.FRONTEND_IMAGE }}|g" k8s/deployment.yml
          kubectl apply -f k8s/
          kubectl rollout status deployment/backend-deployment -n devops
          kubectl rollout status deployment/frontend-deployment -n devops