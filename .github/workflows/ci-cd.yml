name: CI/CD Pipeline

on:
  push:
    branches: [ main, staging ]
  pull_request:
    branches: [ main, staging ]

# Set default permissions to read-only
permissions:
  contents: read

env:
  BACKEND_IMAGE: ${{ github.repository }}/backend:${{ github.ref_name }}
  FRONTEND_IMAGE: ${{ github.repository }}/frontend:${{ github.ref_name }}

jobs:
  # Backend Jobs
  backend-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json
      - name: Install dependencies
        run: |
          cd backend
          npm ci
      - name: Run linting and tests
        run: |
          cd backend
          npm run lint
          npm test
      - name: Upload test coverage
        uses: actions/upload-artifact@v3
        with:
          name: backend-coverage
          path: backend/coverage/
          retention-days: 7

  backend-security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: './backend'
          exit-code: '1'
          severity: 'HIGH,CRITICAL'
          format: 'table'
        continue-on-error: true

  # Frontend Jobs
  frontend-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      - name: Install dependencies
        run: |
          cd frontend
          npm ci
      - name: Run linting and tests
        run: |
          cd frontend
          npm run lint
          npm test
      - name: Upload test coverage
        uses: actions/upload-artifact@v3
        with:
          name: frontend-coverage
          path: frontend/coverage/
          retention-days: 7

  frontend-security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: './frontend'
          exit-code: '1'
          severity: 'HIGH,CRITICAL'
          format: 'table'
        continue-on-error: true

  # Build Jobs
  build:
    runs-on: ubuntu-latest
    needs: [backend-test, backend-security, frontend-test, frontend-security]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging'
    # Add specific permissions needed for this job
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build and push backend image
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: true
          tags: ghcr.io/${{ env.BACKEND_IMAGE }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Build and push frontend image
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          push: true
          tags: ghcr.io/${{ env.FRONTEND_IMAGE }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deployment Jobs
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/staging'
    environment: staging
    steps:
      - uses: actions/checkout@v3
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG }}" > kubeconfig.yaml
          export KUBECONFIG=./kubeconfig.yaml
      - name: Deploy to Kubernetes
        run: |
          cd k8s
          kubectl apply -f namespace.yml
          sed -i "s|image:.*|image: ghcr.io/${{ env.BACKEND_IMAGE }}|g" backend-deployment.yml
          kubectl apply -f .

  deploy-production:
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://your-production-url.com
    steps:
      - uses: actions/checkout@v3
      - name: Set up ArgoCD CLI
        run: |
          curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          sudo install -m 555 argocd-linux-amd64 /usr/local/bin/argocd
          rm argocd-linux-amd64
      - name: Login to ArgoCD
        run: |
          argocd login ${{ secrets.ARGOCD_SERVER }} --username ${{ secrets.ARGOCD_USERNAME }} --password ${{ secrets.ARGOCD_PASSWORD }} --insecure
      - name: Sync ArgoCD application
        run: |
          argocd app sync devops-flow
          argocd app wait devops-flow