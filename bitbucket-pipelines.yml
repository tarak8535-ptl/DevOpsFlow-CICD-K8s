image: atlassian/default-image:3

definitions:
  caches:
    npm: ~/.npm
  steps:
    - step: &backend-test
        name: Backend Test
        caches:
          - npm
        script:
          - cd backend
          - npm ci
          - npm run lint
          - npm test
        artifacts:
          - backend/coverage/**

    - step: &backend-security
        name: Backend Security Scan
        script:
          - pipe: aquasecurity/trivy-pipe:1.0.0
            variables:
              SCAN_TYPE: "fs"
              SCAN_REF: "./backend"
              EXIT_CODE: "1"
              SEVERITY: "HIGH,CRITICAL"
        allow_failure: true

    - step: &terraform-deploy
        name: Deploy AWS Infrastructure
        script:
          - pipe: atlassian/aws-cli-run:1.0.0
            variables:
              AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID
              AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY
              AWS_DEFAULT_REGION: $AWS_DEFAULT_REGION
              COMMAND: "sts get-caller-identity"
          - curl -fsSL https://releases.hashicorp.com/terraform/1.5.0/terraform_1.5.0_linux_amd64.zip -o terraform.zip
          - unzip terraform.zip && chmod +x terraform
          - cd terraform
          - ./terraform init
          - ./terraform plan -out=tfplan
          - ./terraform apply -auto-approve tfplan

    - step: &backend-build
        name: Backend Build
        services:
          - docker
        script:
          - cd backend
          - export ECR_REGISTRY=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
          - export BACKEND_IMAGE=$ECR_REGISTRY/cloudtarkk-infragen/backend:$BITBUCKET_BUILD_NUMBER
          - pipe: atlassian/aws-cli-run:1.0.0
            variables:
              AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID
              AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY
              AWS_DEFAULT_REGION: $AWS_DEFAULT_REGION
              COMMAND: "ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY"
          - docker build -t $BACKEND_IMAGE .
          - docker push $BACKEND_IMAGE

    - step: &frontend-test
        name: Frontend Test
        caches:
          - npm
        script:
          - cd frontend
          - npm ci
          - npm run lint
          - npm test
        artifacts:
          - frontend/coverage/**

    - step: &frontend-security
        name: Frontend Security Scan
        script:
          - pipe: aquasecurity/trivy-pipe:1.0.0
            variables:
              SCAN_TYPE: "fs"
              SCAN_REF: "./frontend"
              EXIT_CODE: "1"
              SEVERITY: "HIGH,CRITICAL"
        allow_failure: true

    - step: &frontend-build
        name: Frontend Build
        services:
          - docker
        script:
          - cd frontend
          - export ECR_REGISTRY=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
          - export FRONTEND_IMAGE=$ECR_REGISTRY/cloudtarkk-infragen/frontend:$BITBUCKET_BUILD_NUMBER
          - pipe: atlassian/aws-cli-run:1.0.0
            variables:
              AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID
              AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY
              AWS_DEFAULT_REGION: $AWS_DEFAULT_REGION
              COMMAND: "ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY"
          - docker build -t $FRONTEND_IMAGE .
          - docker push $FRONTEND_IMAGE

    - step: &deploy-staging
        name: Deploy to EKS Staging
        deployment: staging
        script:
          - pipe: atlassian/aws-cli-run:1.0.0
            variables:
              AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID
              AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY
              AWS_DEFAULT_REGION: $AWS_DEFAULT_REGION
              COMMAND: "eks update-kubeconfig --name cloudtarkk-infragen-cluster --region $AWS_DEFAULT_REGION"
          - export ECR_REGISTRY=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
          - export BACKEND_IMAGE=$ECR_REGISTRY/cloudtarkk-infragen/backend:$BITBUCKET_BUILD_NUMBER
          - export FRONTEND_IMAGE=$ECR_REGISTRY/cloudtarkk-infragen/frontend:$BITBUCKET_BUILD_NUMBER
          - kubectl apply -f k8s/namespace.yml
          - sed -i "s|image:.*backend.*|image: $BACKEND_IMAGE|g" k8s/backend-deployment.yml
          - sed -i "s|image:.*frontend.*|image: $FRONTEND_IMAGE|g" k8s/deployment.yml
          - kubectl apply -f k8s/
          - kubectl rollout status deployment/backend-deployment -n devops

    - step: &deploy-production
        name: Deploy to EKS Production
        deployment: production
        trigger: manual
        script:
          - pipe: atlassian/aws-cli-run:1.0.0
            variables:
              AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID
              AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY
              AWS_DEFAULT_REGION: $AWS_DEFAULT_REGION
              COMMAND: "eks update-kubeconfig --name cloudtarkk-infragen-cluster --region $AWS_DEFAULT_REGION"
          - export ECR_REGISTRY=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
          - export BACKEND_IMAGE=$ECR_REGISTRY/cloudtarkk-infragen/backend:$BITBUCKET_BUILD_NUMBER
          - export FRONTEND_IMAGE=$ECR_REGISTRY/cloudtarkk-infragen/frontend:$BITBUCKET_BUILD_NUMBER
          - kubectl apply -f k8s/namespace.yml
          - sed -i "s|image:.*backend.*|image: $BACKEND_IMAGE|g" k8s/backend-deployment.yml
          - sed -i "s|image:.*frontend.*|image: $FRONTEND_IMAGE|g" k8s/deployment.yml
          - kubectl apply -f k8s/
          - kubectl rollout status deployment/backend-deployment -n devops
          - kubectl rollout status deployment/frontend-deployment -n devops

pipelines:
  branches:
    main:
      - parallel:
          - step: *backend-test
          - step: *frontend-test
      - parallel:
          - step: *backend-security
          - step: *frontend-security
      - step: *terraform-deploy
      - parallel:
          - step: *backend-build
          - step: *frontend-build
      - step: *deploy-production
    staging:
      - parallel:
          - step: *backend-test
          - step: *frontend-test
      - parallel:
          - step: *backend-security
          - step: *frontend-security
      - step: *terraform-deploy
      - parallel:
          - step: *backend-build
          - step: *frontend-build
      - step: *deploy-staging
  pull-requests:
    "**":
      - parallel:
          - step: *backend-test
          - step: *frontend-test
      - parallel:
          - step: *backend-security
          - step: *frontend-security
